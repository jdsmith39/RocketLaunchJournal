// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RocketLaunchJournal.Entities;

namespace RocketLaunchJournal.Entities.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200618034102_v1")]
    partial class v1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(50000);

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(50000);

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("RocketLaunchJournal.Model.APILog", b =>
                {
                    b.Property<long>("APILogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IncomingRequest")
                        .HasColumnType("bit");

                    b.Property<string>("RequestContentBlock")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseContentBlock")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResponseDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("TargetURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("TransmissionDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("APILogId");

                    b.ToTable("APILogs");
                });

            modelBuilder.Entity("RocketLaunchJournal.Model.DelayNote", b =>
                {
                    b.Property<short>("DelayNoteId")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("DelayNoteId");

                    b.ToTable("DelayNotes");
                });

            modelBuilder.Entity("RocketLaunchJournal.Model.Launch", b =>
                {
                    b.Property<int>("LaunchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Altitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ApogeeToEjectionTime")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("AverageAcceleration")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("BurnTime")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("CoastToApogeeTime")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<short?>("DelayNoteId")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("DescentSpeed")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Duration")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("EjectionAltitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("LaunchNumber")
                        .HasColumnType("int");

                    b.Property<string>("Motors")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<decimal?>("PeakAcceleration")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RocketId")
                        .HasColumnType("int");

                    b.Property<decimal?>("TopSpeed")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("LaunchId");

                    b.HasIndex("DelayNoteId");

                    b.HasIndex("RocketId");

                    b.ToTable("Launches");
                });

            modelBuilder.Entity("RocketLaunchJournal.Model.LogType", b =>
                {
                    b.Property<byte>("LogTypeId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("LogTypeId");

                    b.ToTable("LogTypes");
                });

            modelBuilder.Entity("RocketLaunchJournal.Model.Rocket", b =>
                {
                    b.Property<int>("RocketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("BlackPowderForApogee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("BlackPowderForMain")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Diameter")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Length")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ParachuteSize")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("RocketId");

                    b.HasIndex("UserId");

                    b.ToTable("Rockets");
                });

            modelBuilder.Entity("RocketLaunchJournal.Model.SystemLog", b =>
                {
                    b.Property<long>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("EventDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid?>("LogGroupKey")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("LogTypeId")
                        .HasColumnType("tinyint");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LogId");

                    b.HasIndex("LogTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("SystemLogs");
                });

            modelBuilder.Entity("RocketLaunchJournal.Model.UserIdentity.Role", b =>
                {
                    b.Property<byte>("RoleId")
                        .HasColumnType("tinyint");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("RocketLaunchJournal.Model.UserIdentity.RoleClaim", b =>
                {
                    b.Property<int>("RoleClaimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<byte>("RoleId")
                        .HasColumnType("tinyint");

                    b.HasKey("RoleClaimId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("RocketLaunchJournal.Model.UserIdentity.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("AuthyUserId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsLoginEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTimeOffset?>("LastPasswordChangeDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastSignInDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RocketLaunchJournal.Model.UserIdentity.UserClaim", b =>
                {
                    b.Property<int>("UserClaimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("RocketLaunchJournal.Model.UserIdentity.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("RocketLaunchJournal.Model.UserIdentity.UserRefreshToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiresOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ImpersonationUserId")
                        .HasColumnType("int");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("UserId");

                    b.HasIndex("ImpersonationUserId");

                    b.ToTable("UserRefreshTokens");
                });

            modelBuilder.Entity("RocketLaunchJournal.Model.UserIdentity.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<byte>("RoleId")
                        .HasColumnType("tinyint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("RocketLaunchJournal.Model.UserIdentity.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("RocketLaunchJournal.Model.Launch", b =>
                {
                    b.HasOne("RocketLaunchJournal.Model.DelayNote", "DelayNote")
                        .WithMany("Launches")
                        .HasForeignKey("DelayNoteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RocketLaunchJournal.Model.Rocket", "Rocket")
                        .WithMany("Launches")
                        .HasForeignKey("RocketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("RocketLaunchJournal.Model.OwnedTypes.AuditFields", "AuditFields", b1 =>
                        {
                            b1.Property<int>("LaunchId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<int>("CreatedById")
                                .HasColumnName("CreatedById")
                                .HasColumnType("int");

                            b1.Property<DateTimeOffset>("CreatedDateTime")
                                .HasColumnName("CreatedDateTime")
                                .HasColumnType("datetimeoffset");

                            b1.Property<int?>("InactivatedById")
                                .HasColumnName("InactivatedById")
                                .HasColumnType("int");

                            b1.Property<DateTimeOffset?>("InactiveDateTime")
                                .HasColumnName("InactiveDateTime")
                                .HasColumnType("datetimeoffset");

                            b1.Property<int>("UpdatedById")
                                .HasColumnName("UpdatedById")
                                .HasColumnType("int");

                            b1.Property<DateTimeOffset>("UpdatedDateTime")
                                .HasColumnName("UpdatedDateTime")
                                .HasColumnType("datetimeoffset");

                            b1.HasKey("LaunchId");

                            b1.ToTable("Launches");

                            b1.WithOwner()
                                .HasForeignKey("LaunchId");
                        });
                });

            modelBuilder.Entity("RocketLaunchJournal.Model.Rocket", b =>
                {
                    b.HasOne("RocketLaunchJournal.Model.UserIdentity.User", "User")
                        .WithMany("Rockets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("RocketLaunchJournal.Model.OwnedTypes.AuditFields", "AuditFields", b1 =>
                        {
                            b1.Property<int>("RocketId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<int>("CreatedById")
                                .HasColumnName("CreatedById")
                                .HasColumnType("int");

                            b1.Property<DateTimeOffset>("CreatedDateTime")
                                .HasColumnName("CreatedDateTime")
                                .HasColumnType("datetimeoffset");

                            b1.Property<int?>("InactivatedById")
                                .HasColumnName("InactivatedById")
                                .HasColumnType("int");

                            b1.Property<DateTimeOffset?>("InactiveDateTime")
                                .HasColumnName("InactiveDateTime")
                                .HasColumnType("datetimeoffset");

                            b1.Property<int>("UpdatedById")
                                .HasColumnName("UpdatedById")
                                .HasColumnType("int");

                            b1.Property<DateTimeOffset>("UpdatedDateTime")
                                .HasColumnName("UpdatedDateTime")
                                .HasColumnType("datetimeoffset");

                            b1.HasKey("RocketId");

                            b1.ToTable("Rockets");

                            b1.WithOwner()
                                .HasForeignKey("RocketId");
                        });
                });

            modelBuilder.Entity("RocketLaunchJournal.Model.SystemLog", b =>
                {
                    b.HasOne("RocketLaunchJournal.Model.LogType", "LogType")
                        .WithMany("SystemLogs")
                        .HasForeignKey("LogTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RocketLaunchJournal.Model.UserIdentity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RocketLaunchJournal.Model.UserIdentity.RoleClaim", b =>
                {
                    b.HasOne("RocketLaunchJournal.Model.UserIdentity.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RocketLaunchJournal.Model.UserIdentity.User", b =>
                {
                    b.OwnsOne("RocketLaunchJournal.Model.OwnedTypes.AuditFields", "AuditFields", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<int>("CreatedById")
                                .HasColumnName("CreatedById")
                                .HasColumnType("int");

                            b1.Property<DateTimeOffset>("CreatedDateTime")
                                .HasColumnName("CreatedDateTime")
                                .HasColumnType("datetimeoffset");

                            b1.Property<int?>("InactivatedById")
                                .HasColumnName("InactivatedById")
                                .HasColumnType("int");

                            b1.Property<DateTimeOffset?>("InactiveDateTime")
                                .HasColumnName("InactiveDateTime")
                                .HasColumnType("datetimeoffset");

                            b1.Property<int>("UpdatedById")
                                .HasColumnName("UpdatedById")
                                .HasColumnType("int");

                            b1.Property<DateTimeOffset>("UpdatedDateTime")
                                .HasColumnName("UpdatedDateTime")
                                .HasColumnType("datetimeoffset");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });
                });

            modelBuilder.Entity("RocketLaunchJournal.Model.UserIdentity.UserClaim", b =>
                {
                    b.HasOne("RocketLaunchJournal.Model.UserIdentity.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RocketLaunchJournal.Model.UserIdentity.UserLogin", b =>
                {
                    b.HasOne("RocketLaunchJournal.Model.UserIdentity.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RocketLaunchJournal.Model.UserIdentity.UserRefreshToken", b =>
                {
                    b.HasOne("RocketLaunchJournal.Model.UserIdentity.User", "ImpersonationUser")
                        .WithMany()
                        .HasForeignKey("ImpersonationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RocketLaunchJournal.Model.UserIdentity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RocketLaunchJournal.Model.UserIdentity.UserRole", b =>
                {
                    b.HasOne("RocketLaunchJournal.Model.UserIdentity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RocketLaunchJournal.Model.UserIdentity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RocketLaunchJournal.Model.UserIdentity.UserToken", b =>
                {
                    b.HasOne("RocketLaunchJournal.Model.UserIdentity.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
