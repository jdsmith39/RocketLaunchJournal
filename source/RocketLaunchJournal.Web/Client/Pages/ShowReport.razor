@using System.Text.Json
<div class="modal-backdrop fade show"></div>
<div class="modal fade show d-block" style="pointer-events: none;" tabindex="-1" role="dialog">
  <div class="modal-dialog modal-dialog-centered modal-fullscreen" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <div class="col"><h5 class="modal-title">@BlazoredModal.Title</h5></div>
        <button type="button" class="btn-close" aria-label="Close" @onclick="(async () => await BlazoredModal.CancelAsync())">
        </button>
      </div>
      <div class="modal-body">
        @if (Dto == null)
        {
          <p><em>Loading...</em></p>
        }
        else
        {
          <SmartishTable.Root SafeList="DataDtos.Data" @ref="table">
            <table class="table table-condensed table-striped">
              <thead>
                <tr>
                  @foreach (var item in columns)
                  {
                    <SmartishTable.Sort Field="o=>o[item.ColumnName]" Css="canSelect" Comparer="jsonElementComparer">@item.ColumnName</SmartishTable.Sort>
                  }
                </tr>
                <tr>
                  @foreach (var item in columns)
                  {
                    <td>
                      @switch (item.TypeName.ToLower())
                      {
                        case "datetime":
                        case "string":
                          if (!stringOperators.ContainsKey(item.ColumnName))
                            stringOperators[item.ColumnName] = SmartishTable.Filters.StringOperators.Contains;
                          <text>
                            <select @bind="stringOperators[item.ColumnName]" class="form-select form-select-sm">
                              @foreach (var enumItem in SmartishTable.Filters.StringOperators.Equals.GetList())
                              {
                                <option value="@enumItem">@enumItem.GetDisplayName()</option>
                              }
                            </select>
                            <FilterJsonElementString Context="filterContext" PropertyName="@item.ColumnName" Operator="stringOperators[item.ColumnName]">
                              <input type="text" @bind-value="@filterContext.FilterValue" @bind-value:event="oninput" class="form-control form-control-sm" />
                            </FilterJsonElementString>
                          </text>
                          break;
                        case "int":
                        case "decimal":
                        case "double":
                          if (!numericOperators.ContainsKey(item.ColumnName))
                            numericOperators[item.ColumnName] = SmartishTable.Filters.NumericOperators.GreaterThanOrEqual;
                          <text>
                            <select @bind="numericOperators[item.ColumnName]" class="form-select form-select-sm">
                              @foreach (var enumItem in SmartishTable.Filters.NumericOperators.Equals.GetList())
                              {
                                <option value="@enumItem">@enumItem.GetDisplayName()</option>
                              }
                            </select>
                            <FilterJsonElementNumeric PropertyName="@item.ColumnName" Context="filterContext" Operator="numericOperators[item.ColumnName]">
                              <input type="number" @bind-value="@filterContext.FilterValue" @bind-value:event="oninput" class="form-control form-control-sm" />
                            </FilterJsonElementNumeric>
                          </text>
                          break;
                        case "boolean":
                          if (!booleanOperators.ContainsKey(item.ColumnName))
                            booleanOperators[item.ColumnName] = SmartishTable.Filters.BooleanOperators.Equals;
                          <text>
                            <select @bind="booleanOperators[item.ColumnName]" class="form-select form-select-sm">
                              <option value="@SmartishTable.Filters.BooleanOperators.Equals">All</option>
                              @foreach (var enumItem in SmartishTable.Filters.BooleanOperators.Equals.GetList().Where(w => ((byte)w) > 8))
                              {
                                <option selected="@(booleanOperators[item.ColumnName] == enumItem)" value="@enumItem">@enumItem.GetDisplayName()</option>
                              }
                            </select>
                            <FilterJsonElementBoolean PropertyName="@item.ColumnName" Operator="booleanOperators[item.ColumnName]"></FilterJsonElementBoolean>
                          </text>
                          break;
                      }
                    </td>
                  }
                </tr>
              </thead>
              <tbody>
                <SmartishTable.Repeater Context="row">
                  <RowTemplate>
                    <tr>
                      @foreach (var item in columns)
                      {
                        switch (item.TypeName.ToLower())
                        {
                          case "boolean":
                            <td><IsActive Value="@row.Item[item.ColumnName].GetBoolean()" /></td>
                            break;
                          case "dateonly":
                          case "datetime":
                            @if (DateTime.TryParse(row.Item[item.ColumnName].GetString(), out DateTime value))
                            {
                              <td>@value.ToString("yyyy-MM-dd")</td>
                            }
                            else
                            {
                              <td></td>
                            }
                            break;
                          default:
                            <td>@row.Item[item.ColumnName]</td>
                            break;
                        }
                      }
                    </tr>
                  </RowTemplate>
                  <EmptyTemplate>
                      <tr>
                      <td colspan="@columns.Count">No Data</td>
                      </tr>
                  </EmptyTemplate>
                </SmartishTable.Repeater>
              </tbody>
              <tfoot>
                <tr>
                  <td colspan="@columns.Count">
                    <SmartishTable.Pagination Context="Pager">
                      <RocketLaunchJournal.Web.Client.Shared.SmartishTablePager Paginator="Pager"></RocketLaunchJournal.Web.Client.Shared.SmartishTablePager>
                    </SmartishTable.Pagination>
                  </td>
                </tr>
              </tfoot>
            </table>
          </SmartishTable.Root>
        }
      </div>
      <div class="modal-footer">
        <div class="col text-end">
          <button type="button" class="btn btn-outline-warning" @onclick="@(e => BlazoredModal.CancelAsync())" accesskey="C"><i class="fas fa-window-close"></i> Close</button>
        </div>
      </div>
    </div>
  </div>
</div>

@code {
  [CascadingParameter]
  private BlazoredModalInstance BlazoredModal { get; set; } = default!;

  [Parameter]
  public ReportDto Dto { get; set; }

  [Parameter]
  public ReportDataDto<JsonElement> DataDtos { get; set; }

  private Dictionary<string, SmartishTable.Filters.StringOperators> stringOperators = new Dictionary<string, SmartishTable.Filters.StringOperators>();
  private Dictionary<string, SmartishTable.Filters.BooleanOperators> booleanOperators = new Dictionary<string, SmartishTable.Filters.BooleanOperators>();
  private Dictionary<string, SmartishTable.Filters.NumericOperators> numericOperators = new Dictionary<string, SmartishTable.Filters.NumericOperators>();

  private SmartishTable.Root<Dictionary<string, JsonElement>> table;
  private List<ReportSourceColumnDto> columns;
  private JsonElementComparer jsonElementComparer = new JsonElementComparer();

  protected override void OnInitialized()
  {
    columns = Dto.Columns.Where(w => w.InOutput).ToList();
  }

  protected override void OnParametersSet()
  {
    columns = Dto.Columns.Where(w => w.InOutput).ToList();
  }

  public class JsonElementComparer : IComparer<object?>
  {
    public int Compare(object? xx, object? yy)
    {
      if (xx == null && yy == null)
        return 0;

      if (xx == null && yy != null)
        return 1;
      if (xx != null && yy == null)
        return -1;

      var x = (JsonElement?)xx;
      var y = (JsonElement?)yy;

      if (x.Value.ValueKind != JsonValueKind.Null && y.Value.ValueKind == JsonValueKind.Null)
        return -1;

      switch (x.Value.ValueKind)
      {
        case JsonValueKind.Undefined:
          break;
        case JsonValueKind.Object:
          break;
        case JsonValueKind.Array:
          break;
        case JsonValueKind.String:
          return string.Compare(x.Value.GetString(), y.Value.GetString(), true);
        case JsonValueKind.Number:
          var xDouble = x.Value.GetDouble();
          var yDouble = y.Value.GetDouble();
          if (xDouble < yDouble)
            return -1;
          else if (xDouble > yDouble)
            return 1;
          return 0;
        case JsonValueKind.True:
        case JsonValueKind.False:
          var xBool = x.Value.GetBoolean();
          var yBool = y.Value.GetBoolean();
          if (xBool == yBool)
            return 0;
          else if (xBool && !yBool)
            return 1;
          return -1;
        case JsonValueKind.Null:
          if (y.Value.ValueKind == JsonValueKind.Null)
            return 0;
          return 1;
      }
      return 0;
    }
  }
}
