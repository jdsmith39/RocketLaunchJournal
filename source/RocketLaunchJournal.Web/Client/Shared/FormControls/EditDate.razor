@typeparam TValue
@inherits InputBase<TValue>

<div class="mb-3 row gx-2">
  <label for="@($"{_predicate}{nameSuffix}")" class="col-form-label col-sm-3">
    <DefaultLabel Name=@PropertyReflections.GetLabelName(PropertyInfo) IsRequired="@PropertyReflections.IsRequired(PropertyInfo)"></DefaultLabel>
    <InputUnsavedChangesNotifcation Value="@(!oldValue.Equals(CurrentValue))" />
  </label>
  <div class="col-sm-9">
    <InputDate @bind-Value="CurrentValue" class="@($"form-control {CssClass}")" id="@($"{_predicate}{nameSuffix}")" />
    @*<input @bind="CurrentValueAsString" @bind:format="DateFormat" id="@($"{_predicate}{nameSuffix}")" type="date" class="form-control @CssClass" />*@
    @if (For != null)
    {
<ValidationMessage For="@For" />}
  </div>
</div>

@using System.Diagnostics.CodeAnalysis;
@using System.Globalization;
@code { 
    [Parameter]
    public System.Reflection.PropertyInfo PropertyInfo { get; set; } = default!;

    [Parameter]
    public System.Linq.Expressions.Expression<Func<TValue>>? For { get; set; }

    private string? _predicate;

    private string nameSuffix = DateTime.UtcNow.Ticks.ToString();

    private TValue oldValue;

    [Parameter] public string ParsingErrorMessage { get; set; } = "The {0} field must be a date.";

    private const string DateFormat = Web.Shared.Constants.Formats.DefaultDateFormat;
    protected override void OnInitialized()
    {
      oldValue = Value;
      _predicate = PropertyInfo.Name;
    }

    protected override string FormatValueAsString([AllowNull] TValue value)
    {
      switch (value)
      {
        case DateTime dateTimeValue:
          return BindConverter.FormatValue(dateTimeValue, DateFormat, CultureInfo.InvariantCulture);
        case DateTimeOffset dateTimeOffsetValue:
          return BindConverter.FormatValue(dateTimeOffsetValue, DateFormat, CultureInfo.InvariantCulture);
        default:
          return string.Empty; // Handles null for Nullable<DateTime>, etc.
      }
    }

    /// <inheritdoc />
    protected override bool TryParseValueFromString(string? value, [MaybeNull] out TValue result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
      // Unwrap nullable types. We don't have to deal with receiving empty values for nullable
      // types here, because the underlying InputBase already covers that.
      var targetType = Nullable.GetUnderlyingType(typeof(TValue)) ?? typeof(TValue);

      bool success;
      if (targetType == typeof(DateTime))
      {
        success = TryParseDateTime(value, out result);
      }
      else if (targetType == typeof(DateTimeOffset))
      {
        success = TryParseDateTimeOffset(value, out result);
      }
      else
      {
        throw new InvalidOperationException($"The type '{targetType}' is not a supported date type.");
      }

      if (success)
      {
        validationErrorMessage = null;
        return true;
      }
      else
      {
        validationErrorMessage = string.Format(ParsingErrorMessage, PropertyReflections.GetLabelName(PropertyInfo) ?? FieldIdentifier.FieldName);
        return false;
      }
    }

    static bool TryParseDateTime(string? value, [MaybeNullWhen(false)] out TValue result)
    {
      var success = BindConverter.TryConvertToDateTime(value, CultureInfo.InvariantCulture, DateFormat, out var parsedValue);
      if (success)
      {
        result = (TValue)(object)parsedValue;
        return true;
      }
      else
      {
        result = default;
        return false;
      }
    }

    static bool TryParseDateTimeOffset(string? value, [MaybeNullWhen(false)] out TValue result)
    {
      var success = BindConverter.TryConvertToDateTimeOffset(value, CultureInfo.InvariantCulture, DateFormat, out var parsedValue);
      if (success)
      {
        result = (TValue)(object)parsedValue;
        return true;
      }
      else
      {
        result = default;
        return false;
      }
    } }
