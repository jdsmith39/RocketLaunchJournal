@typeparam T
@inherits InputBase<T>

<div class="mb-3 row gx-2">
  <label for="@($"{_predicate}{nameSuffix}")" class="col-form-label @LabelCss">
    <DefaultLabel Name=@PropertyReflections.GetLabelName(PropertyInfo) IsRequired="@PropertyReflections.IsRequired(PropertyInfo)"></DefaultLabel>
    <InputUnsavedChangesNotifcation Value="@(!oldValue.Equals(CurrentValue))" />
  </label>
  <div class="col-sm">
    <input @bind="CurrentValueAsString" id="@($"{_predicate}{nameSuffix}")" type="number" class="form-control @CssClass" step=".0001" />
    @if (ValidationFor != null)
    {
<ValidationMessage For="@ValidationFor" />}
  </div>
</div>

@using System.Diagnostics.CodeAnalysis;
@using System.Globalization;
@code { 
    private readonly static string _stepAttributeValue; // Null by default, so only allows whole numbers as per HTML spec

    [Parameter] public string LabelCss { get; set; } = "col-sm-3";

    static EditNumber()
    {
      // Unwrap Nullable<T>, because InputBase already deals with the Nullable aspect
      // of it for us. We will only get asked to parse the T for nonempty inputs.
      var targetType = Nullable.GetUnderlyingType(typeof(T)) ?? typeof(T);
      if (targetType == typeof(int) ||
          targetType == typeof(long) ||
          targetType == typeof(short) ||
          targetType == typeof(float) ||
          targetType == typeof(double) ||
          targetType == typeof(decimal))
      {
        _stepAttributeValue = "any";
      }
      else
      {
        throw new InvalidOperationException($"The type '{targetType}' is not a supported numeric type.");
      }
    }

    [Parameter]
    public System.Reflection.PropertyInfo PropertyInfo { get; set; } = default!;

    [Parameter]
    public System.Linq.Expressions.Expression<Func<T>>? ValidationFor { get; set; }

    private string? _predicate;

    private string nameSuffix = DateTime.UtcNow.Ticks.ToString();

    private T oldValue;

    protected override void OnInitialized()
    {
      oldValue = Value;
      _predicate = PropertyInfo.Name;
    }

    /// <summary>
    /// Gets or sets the error message used when displaying an a parsing error.
    /// </summary>
    [Parameter] public string ParsingErrorMessage { get; set; } = "The {0} field must be a number.";

    protected override bool TryParseValueFromString(string? value, [MaybeNull] out T result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
      if (BindConverter.TryConvertTo<T>(value, CultureInfo.InvariantCulture, out result))
      {
        validationErrorMessage = null;
        return true;
      }
      else
      {
        validationErrorMessage = string.Format(ParsingErrorMessage, FieldIdentifier.FieldName);
        return false;
      }
    }

    /// <summary>
    /// Formats the value as a string. Derived classes can override this to determine the formatting used for <c>CurrentValueAsString</c>.
    /// </summary>
    /// <param name="value">The value to format.</param>
    /// <returns>A string representation of the value.</returns>
    protected override string? FormatValueAsString([AllowNull] T value)
    {
      // Avoiding a cast to IFormattable to avoid boxing.
      switch (value)
      {
        case null:
          return null;

        case int @int:
          return BindConverter.FormatValue(@int, CultureInfo.InvariantCulture);

        case long @long:
          return BindConverter.FormatValue(@long, CultureInfo.InvariantCulture);

        //case short @short:
        //  return BindConverter.FormatValue(@short, CultureInfo.InvariantCulture);

        case float @float:
          return BindConverter.FormatValue(@float, CultureInfo.InvariantCulture);

        case double @double:
          return BindConverter.FormatValue(@double, CultureInfo.InvariantCulture);

        case decimal @decimal:
          return BindConverter.FormatValue(@decimal, CultureInfo.InvariantCulture);

        default:
          throw new InvalidOperationException($"Unsupported type {value.GetType()}");
      }
    } }
